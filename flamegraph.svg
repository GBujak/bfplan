<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="581.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="58941"><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="0.0000%" y="517" width="0.0204%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (19 samples, 0.03%)</title><rect x="0.0204%" y="517" width="0.0322%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="19"/><text x="0.2704%" y="527.50"></text></g><g><title>_int_free (23 samples, 0.04%)</title><rect x="0.0560%" y="501" width="0.0390%" height="15" fill="rgb(221,193,54)" fg:x="33" fg:w="23"/><text x="0.3060%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.01%)</title><rect x="0.0950%" y="501" width="0.0136%" height="15" fill="rgb(248,212,6)" fg:x="56" fg:w="8"/><text x="0.3450%" y="511.50"></text></g><g><title>[[heap]] (474 samples, 0.80%)</title><rect x="0.0526%" y="517" width="0.8042%" height="15" fill="rgb(208,68,35)" fg:x="31" fg:w="474"/><text x="0.3026%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (434 samples, 0.74%)</title><rect x="0.1205%" y="501" width="0.7363%" height="15" fill="rgb(232,128,0)" fg:x="71" fg:w="434"/><text x="0.3705%" y="511.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14 samples, 0.02%)</title><rect x="0.8568%" y="501" width="0.0238%" height="15" fill="rgb(207,160,47)" fg:x="505" fg:w="14"/><text x="1.1068%" y="511.50"></text></g><g><title>std::io::stdio::Stdout::lock (7 samples, 0.01%)</title><rect x="0.8687%" y="485" width="0.0119%" height="15" fill="rgb(228,23,34)" fg:x="512" fg:w="7"/><text x="1.1187%" y="495.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (7 samples, 0.01%)</title><rect x="0.8687%" y="469" width="0.0119%" height="15" fill="rgb(218,30,26)" fg:x="512" fg:w="7"/><text x="1.1187%" y="479.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (7 samples, 0.01%)</title><rect x="0.8687%" y="453" width="0.0119%" height="15" fill="rgb(220,122,19)" fg:x="512" fg:w="7"/><text x="1.1187%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (69 samples, 0.12%)</title><rect x="0.8873%" y="501" width="0.1171%" height="15" fill="rgb(250,228,42)" fg:x="523" fg:w="69"/><text x="1.1373%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (49 samples, 0.08%)</title><rect x="1.0044%" y="501" width="0.0831%" height="15" fill="rgb(240,193,28)" fg:x="592" fg:w="49"/><text x="1.2544%" y="511.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (22 samples, 0.04%)</title><rect x="1.0502%" y="485" width="0.0373%" height="15" fill="rgb(216,20,37)" fg:x="619" fg:w="22"/><text x="1.3002%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (22 samples, 0.04%)</title><rect x="1.0502%" y="469" width="0.0373%" height="15" fill="rgb(206,188,39)" fg:x="619" fg:w="22"/><text x="1.3002%" y="479.50"></text></g><g><title>std::memchr::memrchr (22 samples, 0.04%)</title><rect x="1.0502%" y="453" width="0.0373%" height="15" fill="rgb(217,207,13)" fg:x="619" fg:w="22"/><text x="1.3002%" y="463.50"></text></g><g><title>std::sys::unix::memchr::memrchr (22 samples, 0.04%)</title><rect x="1.0502%" y="437" width="0.0373%" height="15" fill="rgb(231,73,38)" fg:x="619" fg:w="22"/><text x="1.3002%" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (22 samples, 0.04%)</title><rect x="1.0502%" y="421" width="0.0373%" height="15" fill="rgb(225,20,46)" fg:x="619" fg:w="22"/><text x="1.3002%" y="431.50"></text></g><g><title>alloc::slice::merge_sort (12 samples, 0.02%)</title><rect x="1.1045%" y="501" width="0.0204%" height="15" fill="rgb(210,31,41)" fg:x="651" fg:w="12"/><text x="1.3545%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (12 samples, 0.02%)</title><rect x="1.1045%" y="485" width="0.0204%" height="15" fill="rgb(221,200,47)" fg:x="651" fg:w="12"/><text x="1.3545%" y="495.50"></text></g><g><title>bfplan::annealing::energy::BufferStatistics::emplace_of_buffer (97 samples, 0.16%)</title><rect x="1.1249%" y="501" width="0.1646%" height="15" fill="rgb(226,26,5)" fg:x="663" fg:w="97"/><text x="1.3749%" y="511.50"></text></g><g><title>bfplan::annealing::energy::BufferStatistics::energy (7 samples, 0.01%)</title><rect x="1.2894%" y="501" width="0.0119%" height="15" fill="rgb(249,33,26)" fg:x="760" fg:w="7"/><text x="1.5394%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::assert_maps_synchronized (18 samples, 0.03%)</title><rect x="1.3098%" y="501" width="0.0305%" height="15" fill="rgb(235,183,28)" fg:x="772" fg:w="18"/><text x="1.5598%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::collision_checks (137 samples, 0.23%)</title><rect x="1.3403%" y="501" width="0.2324%" height="15" fill="rgb(221,5,38)" fg:x="790" fg:w="137"/><text x="1.5903%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (14 samples, 0.02%)</title><rect x="1.5745%" y="501" width="0.0238%" height="15" fill="rgb(247,18,42)" fg:x="928" fg:w="14"/><text x="1.8245%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (17 samples, 0.03%)</title><rect x="1.5982%" y="501" width="0.0288%" height="15" fill="rgb(241,131,45)" fg:x="942" fg:w="17"/><text x="1.8482%" y="511.50"></text></g><g><title>core::fmt::write (18 samples, 0.03%)</title><rect x="1.6271%" y="501" width="0.0305%" height="15" fill="rgb(249,31,29)" fg:x="959" fg:w="18"/><text x="1.8771%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (64 samples, 0.11%)</title><rect x="1.6576%" y="501" width="0.1086%" height="15" fill="rgb(225,111,53)" fg:x="977" fg:w="64"/><text x="1.9076%" y="511.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (16 samples, 0.03%)</title><rect x="1.7662%" y="501" width="0.0271%" height="15" fill="rgb(238,160,17)" fg:x="1041" fg:w="16"/><text x="2.0162%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.01%)</title><rect x="1.7933%" y="501" width="0.0119%" height="15" fill="rgb(214,148,48)" fg:x="1057" fg:w="7"/><text x="2.0433%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (259 samples, 0.44%)</title><rect x="1.8052%" y="501" width="0.4394%" height="15" fill="rgb(232,36,49)" fg:x="1064" fg:w="259"/><text x="2.0552%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (135 samples, 0.23%)</title><rect x="2.2446%" y="501" width="0.2290%" height="15" fill="rgb(209,103,24)" fg:x="1323" fg:w="135"/><text x="2.4946%" y="511.50"></text></g><g><title>[[stack]] (964 samples, 1.64%)</title><rect x="0.8568%" y="517" width="1.6355%" height="15" fill="rgb(229,88,8)" fg:x="505" fg:w="964"/><text x="1.1068%" y="527.50"></text></g><g><title>std::io::stdio::_print (7 samples, 0.01%)</title><rect x="2.4804%" y="501" width="0.0119%" height="15" fill="rgb(213,181,19)" fg:x="1462" fg:w="7"/><text x="2.7304%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (14 samples, 0.02%)</title><rect x="2.4923%" y="501" width="0.0238%" height="15" fill="rgb(254,191,54)" fg:x="1469" fg:w="14"/><text x="2.7423%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (36 samples, 0.06%)</title><rect x="2.5161%" y="501" width="0.0611%" height="15" fill="rgb(241,83,37)" fg:x="1483" fg:w="36"/><text x="2.7661%" y="511.50"></text></g><g><title>[bfplan] (74 samples, 0.13%)</title><rect x="2.4923%" y="517" width="0.1255%" height="15" fill="rgb(233,36,39)" fg:x="1469" fg:w="74"/><text x="2.7423%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (14 samples, 0.02%)</title><rect x="2.5941%" y="501" width="0.0238%" height="15" fill="rgb(226,3,54)" fg:x="1529" fg:w="14"/><text x="2.8441%" y="511.50"></text></g><g><title>bfplan::annealing::energy::BufferStatistics::energy (12 samples, 0.02%)</title><rect x="2.6213%" y="501" width="0.0204%" height="15" fill="rgb(245,192,40)" fg:x="1545" fg:w="12"/><text x="2.8713%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::assert_maps_synchronized (11 samples, 0.02%)</title><rect x="2.6450%" y="501" width="0.0187%" height="15" fill="rgb(238,167,29)" fg:x="1559" fg:w="11"/><text x="2.8950%" y="511.50"></text></g><g><title>[libc-2.33.so] (33 samples, 0.06%)</title><rect x="2.6179%" y="517" width="0.0560%" height="15" fill="rgb(232,182,51)" fg:x="1543" fg:w="33"/><text x="2.8679%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.05%)</title><rect x="2.6790%" y="501" width="0.0526%" height="15" fill="rgb(231,60,39)" fg:x="1579" fg:w="31"/><text x="2.9290%" y="511.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (87 samples, 0.15%)</title><rect x="2.7315%" y="501" width="0.1476%" height="15" fill="rgb(208,69,12)" fg:x="1610" fg:w="87"/><text x="2.9815%" y="511.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (144 samples, 0.24%)</title><rect x="2.8792%" y="501" width="0.2443%" height="15" fill="rgb(235,93,37)" fg:x="1697" fg:w="144"/><text x="3.1292%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (19 samples, 0.03%)</title><rect x="3.0912%" y="485" width="0.0322%" height="15" fill="rgb(213,116,39)" fg:x="1822" fg:w="19"/><text x="3.3412%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19 samples, 0.03%)</title><rect x="3.0912%" y="469" width="0.0322%" height="15" fill="rgb(222,207,29)" fg:x="1822" fg:w="19"/><text x="3.3412%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (19 samples, 0.03%)</title><rect x="3.0912%" y="453" width="0.0322%" height="15" fill="rgb(206,96,30)" fg:x="1822" fg:w="19"/><text x="3.3412%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.03%)</title><rect x="3.0912%" y="437" width="0.0322%" height="15" fill="rgb(218,138,4)" fg:x="1822" fg:w="19"/><text x="3.3412%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (81 samples, 0.14%)</title><rect x="3.1235%" y="501" width="0.1374%" height="15" fill="rgb(250,191,14)" fg:x="1841" fg:w="81"/><text x="3.3735%" y="511.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (33 samples, 0.06%)</title><rect x="3.2049%" y="485" width="0.0560%" height="15" fill="rgb(239,60,40)" fg:x="1889" fg:w="33"/><text x="3.4549%" y="495.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (33 samples, 0.06%)</title><rect x="3.2049%" y="469" width="0.0560%" height="15" fill="rgb(206,27,48)" fg:x="1889" fg:w="33"/><text x="3.4549%" y="479.50"></text></g><g><title>std::memchr::memrchr (32 samples, 0.05%)</title><rect x="3.2066%" y="453" width="0.0543%" height="15" fill="rgb(225,35,8)" fg:x="1890" fg:w="32"/><text x="3.4566%" y="463.50"></text></g><g><title>std::sys::unix::memchr::memrchr (32 samples, 0.05%)</title><rect x="3.2066%" y="437" width="0.0543%" height="15" fill="rgb(250,213,24)" fg:x="1890" fg:w="32"/><text x="3.4566%" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (32 samples, 0.05%)</title><rect x="3.2066%" y="421" width="0.0543%" height="15" fill="rgb(247,123,22)" fg:x="1890" fg:w="32"/><text x="3.4566%" y="431.50"></text></g><g><title>__GI___libc_free (14 samples, 0.02%)</title><rect x="3.2694%" y="501" width="0.0238%" height="15" fill="rgb(231,138,38)" fg:x="1927" fg:w="14"/><text x="3.5194%" y="511.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.04%)</title><rect x="3.2931%" y="501" width="0.0356%" height="15" fill="rgb(231,145,46)" fg:x="1941" fg:w="21"/><text x="3.5431%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (37 samples, 0.06%)</title><rect x="3.3338%" y="501" width="0.0628%" height="15" fill="rgb(251,118,11)" fg:x="1965" fg:w="37"/><text x="3.5838%" y="511.50"></text></g><g><title>__memrchr_avx2 (9 samples, 0.02%)</title><rect x="3.3966%" y="501" width="0.0153%" height="15" fill="rgb(217,147,25)" fg:x="2002" fg:w="9"/><text x="3.6466%" y="511.50"></text></g><g><title>__rdl_alloc (8 samples, 0.01%)</title><rect x="3.4136%" y="501" width="0.0136%" height="15" fill="rgb(247,81,37)" fg:x="2012" fg:w="8"/><text x="3.6636%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.01%)</title><rect x="3.4136%" y="485" width="0.0136%" height="15" fill="rgb(209,12,38)" fg:x="2012" fg:w="8"/><text x="3.6636%" y="495.50"></text></g><g><title>_int_free (22 samples, 0.04%)</title><rect x="3.4272%" y="501" width="0.0373%" height="15" fill="rgb(227,1,9)" fg:x="2020" fg:w="22"/><text x="3.6772%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.03%)</title><rect x="3.4696%" y="501" width="0.0254%" height="15" fill="rgb(248,47,43)" fg:x="2045" fg:w="15"/><text x="3.7196%" y="511.50"></text></g><g><title>alloc::slice::merge_sort (46 samples, 0.08%)</title><rect x="3.4950%" y="501" width="0.0780%" height="15" fill="rgb(221,10,30)" fg:x="2060" fg:w="46"/><text x="3.7450%" y="511.50"></text></g><g><title>bfplan::annealing::annealing_functions::should_accept_state (9 samples, 0.02%)</title><rect x="3.5731%" y="501" width="0.0153%" height="15" fill="rgb(210,229,1)" fg:x="2106" fg:w="9"/><text x="3.8231%" y="511.50"></text></g><g><title>bfplan::annealing::energy::BufferStatistics::emplace_of_buffer (273 samples, 0.46%)</title><rect x="3.5883%" y="501" width="0.4632%" height="15" fill="rgb(222,148,37)" fg:x="2115" fg:w="273"/><text x="3.8383%" y="511.50"></text></g><g><title>bfplan::annealing::energy::BufferStatistics::energy (10 samples, 0.02%)</title><rect x="4.0515%" y="501" width="0.0170%" height="15" fill="rgb(234,67,33)" fg:x="2388" fg:w="10"/><text x="4.3015%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::apply_mutation (32 samples, 0.05%)</title><rect x="4.0685%" y="501" width="0.0543%" height="15" fill="rgb(247,98,35)" fg:x="2398" fg:w="32"/><text x="4.3185%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::collision_checks (182 samples, 0.31%)</title><rect x="4.1279%" y="501" width="0.3088%" height="15" fill="rgb(247,138,52)" fg:x="2433" fg:w="182"/><text x="4.3779%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::put_lesson (21 samples, 0.04%)</title><rect x="4.4366%" y="501" width="0.0356%" height="15" fill="rgb(213,79,30)" fg:x="2615" fg:w="21"/><text x="4.6866%" y="511.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::remove_lesson (34 samples, 0.06%)</title><rect x="4.4723%" y="501" width="0.0577%" height="15" fill="rgb(246,177,23)" fg:x="2636" fg:w="34"/><text x="4.7223%" y="511.50"></text></g><g><title>bfplan::annealing::mutation::Mutation::legal_of_buffer (8 samples, 0.01%)</title><rect x="4.5300%" y="501" width="0.0136%" height="15" fill="rgb(230,62,27)" fg:x="2670" fg:w="8"/><text x="4.7800%" y="511.50"></text></g><g><title>bfplan::main (15 samples, 0.03%)</title><rect x="4.5435%" y="501" width="0.0254%" height="15" fill="rgb(216,154,8)" fg:x="2678" fg:w="15"/><text x="4.7935%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (18 samples, 0.03%)</title><rect x="4.5690%" y="501" width="0.0305%" height="15" fill="rgb(244,35,45)" fg:x="2693" fg:w="18"/><text x="4.8190%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_integral (23 samples, 0.04%)</title><rect x="4.5995%" y="501" width="0.0390%" height="15" fill="rgb(251,115,12)" fg:x="2711" fg:w="23"/><text x="4.8495%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (9 samples, 0.02%)</title><rect x="4.6385%" y="501" width="0.0153%" height="15" fill="rgb(240,54,50)" fg:x="2734" fg:w="9"/><text x="4.8885%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (47 samples, 0.08%)</title><rect x="4.6538%" y="501" width="0.0797%" height="15" fill="rgb(233,84,52)" fg:x="2743" fg:w="47"/><text x="4.9038%" y="511.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (30 samples, 0.05%)</title><rect x="4.7335%" y="501" width="0.0509%" height="15" fill="rgb(207,117,47)" fg:x="2790" fg:w="30"/><text x="4.9835%" y="511.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (18 samples, 0.03%)</title><rect x="4.7844%" y="501" width="0.0305%" height="15" fill="rgb(249,43,39)" fg:x="2820" fg:w="18"/><text x="5.0344%" y="511.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (10 samples, 0.02%)</title><rect x="4.7980%" y="485" width="0.0170%" height="15" fill="rgb(209,38,44)" fg:x="2828" fg:w="10"/><text x="5.0480%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (93 samples, 0.16%)</title><rect x="4.8167%" y="501" width="0.1578%" height="15" fill="rgb(236,212,23)" fg:x="2839" fg:w="93"/><text x="5.0667%" y="511.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (9 samples, 0.02%)</title><rect x="4.9762%" y="501" width="0.0153%" height="15" fill="rgb(242,79,21)" fg:x="2933" fg:w="9"/><text x="5.2262%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,612 samples, 2.73%)</title><rect x="4.9914%" y="501" width="2.7349%" height="15" fill="rgb(211,96,35)" fg:x="2942" fg:w="1612"/><text x="5.2414%" y="511.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (430 samples, 0.73%)</title><rect x="7.7264%" y="501" width="0.7295%" height="15" fill="rgb(253,215,40)" fg:x="4554" fg:w="430"/><text x="7.9764%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (677 samples, 1.15%)</title><rect x="8.4559%" y="501" width="1.1486%" height="15" fill="rgb(211,81,21)" fg:x="4984" fg:w="677"/><text x="8.7059%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (339 samples, 0.58%)</title><rect x="9.6045%" y="501" width="0.5752%" height="15" fill="rgb(208,190,38)" fg:x="5661" fg:w="339"/><text x="9.8545%" y="511.50"></text></g><g><title>rand::random (6 samples, 0.01%)</title><rect x="10.1797%" y="501" width="0.0102%" height="15" fill="rgb(235,213,38)" fg:x="6000" fg:w="6"/><text x="10.4297%" y="511.50"></text></g><g><title>rand::rngs::thread::thread_rng (6 samples, 0.01%)</title><rect x="10.1899%" y="501" width="0.0102%" height="15" fill="rgb(237,122,38)" fg:x="6006" fg:w="6"/><text x="10.4399%" y="511.50"></text></g><g><title>[unknown] (4,444 samples, 7.54%)</title><rect x="2.6739%" y="517" width="7.5397%" height="15" fill="rgb(244,218,35)" fg:x="1576" fg:w="4444"/><text x="2.9239%" y="527.50">[unknown]</text></g><g><title>_int_free (6 samples, 0.01%)</title><rect x="10.2153%" y="517" width="0.0102%" height="15" fill="rgb(240,68,47)" fg:x="6021" fg:w="6"/><text x="10.4653%" y="527.50"></text></g><g><title>[libm-2.33.so] (42 samples, 0.07%)</title><rect x="10.4834%" y="325" width="0.0713%" height="15" fill="rgb(210,16,53)" fg:x="6179" fg:w="42"/><text x="10.7334%" y="335.50"></text></g><g><title>rand::rngs::thread::thread_rng (9 samples, 0.02%)</title><rect x="10.5563%" y="325" width="0.0153%" height="15" fill="rgb(235,124,12)" fg:x="6222" fg:w="9"/><text x="10.8063%" y="335.50"></text></g><g><title>bfplan::annealing::annealing_functions::should_accept_state (100 samples, 0.17%)</title><rect x="10.4240%" y="341" width="0.1697%" height="15" fill="rgb(224,169,11)" fg:x="6144" fg:w="100"/><text x="10.6740%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide (13 samples, 0.02%)</title><rect x="10.5716%" y="325" width="0.0221%" height="15" fill="rgb(250,166,2)" fg:x="6231" fg:w="13"/><text x="10.8216%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (12 samples, 0.02%)</title><rect x="10.5733%" y="309" width="0.0204%" height="15" fill="rgb(242,216,29)" fg:x="6232" fg:w="12"/><text x="10.8233%" y="319.50"></text></g><g><title>__GI___libc_free (85 samples, 0.14%)</title><rect x="14.5417%" y="325" width="0.1442%" height="15" fill="rgb(230,116,27)" fg:x="8571" fg:w="85"/><text x="14.7917%" y="335.50"></text></g><g><title>_int_free (56 samples, 0.10%)</title><rect x="14.5909%" y="309" width="0.0950%" height="15" fill="rgb(228,99,48)" fg:x="8600" fg:w="56"/><text x="14.8409%" y="319.50"></text></g><g><title>__GI___libc_malloc (43 samples, 0.07%)</title><rect x="14.6859%" y="325" width="0.0730%" height="15" fill="rgb(253,11,6)" fg:x="8656" fg:w="43"/><text x="14.9359%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (39 samples, 0.07%)</title><rect x="14.7588%" y="325" width="0.0662%" height="15" fill="rgb(247,143,39)" fg:x="8699" fg:w="39"/><text x="15.0088%" y="335.50"></text></g><g><title>__memset_avx2_unaligned_erms (48 samples, 0.08%)</title><rect x="14.8250%" y="325" width="0.0814%" height="15" fill="rgb(236,97,10)" fg:x="8738" fg:w="48"/><text x="15.0750%" y="335.50"></text></g><g><title>__GI___libc_free (96 samples, 0.16%)</title><rect x="18.4710%" y="309" width="0.1629%" height="15" fill="rgb(233,208,19)" fg:x="10887" fg:w="96"/><text x="18.7210%" y="319.50"></text></g><g><title>_int_free (71 samples, 0.12%)</title><rect x="18.5134%" y="293" width="0.1205%" height="15" fill="rgb(216,164,2)" fg:x="10912" fg:w="71"/><text x="18.7634%" y="303.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.06%)</title><rect x="18.6339%" y="309" width="0.0594%" height="15" fill="rgb(220,129,5)" fg:x="10983" fg:w="35"/><text x="18.8839%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (58 samples, 0.10%)</title><rect x="18.6933%" y="309" width="0.0984%" height="15" fill="rgb(242,17,10)" fg:x="11018" fg:w="58"/><text x="18.9433%" y="319.50"></text></g><g><title>__GI___libc_malloc (45 samples, 0.08%)</title><rect x="18.8884%" y="277" width="0.0763%" height="15" fill="rgb(242,107,0)" fg:x="11133" fg:w="45"/><text x="19.1384%" y="287.50"></text></g><g><title>alloc::slice::merge_sort (2,384 samples, 4.04%)</title><rect x="14.9234%" y="325" width="4.0447%" height="15" fill="rgb(251,28,31)" fg:x="8796" fg:w="2384"/><text x="15.1734%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (95 samples, 0.16%)</title><rect x="18.8069%" y="309" width="0.1612%" height="15" fill="rgb(233,223,10)" fg:x="11085" fg:w="95"/><text x="19.0569%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (62 samples, 0.11%)</title><rect x="18.8629%" y="293" width="0.1052%" height="15" fill="rgb(215,21,27)" fg:x="11118" fg:w="62"/><text x="19.1129%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,212 samples, 2.06%)</title><rect x="36.6553%" y="309" width="2.0563%" height="15" fill="rgb(232,23,21)" fg:x="21605" fg:w="1212"/><text x="36.9053%" y="319.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1,463 samples, 2.48%)</title><rect x="38.7116%" y="309" width="2.4821%" height="15" fill="rgb(244,5,23)" fg:x="22817" fg:w="1463"/><text x="38.9616%" y="319.50">co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15,793 samples, 26.79%)</title><rect x="18.9681%" y="325" width="26.7946%" height="15" fill="rgb(226,81,46)" fg:x="11180" fg:w="15793"/><text x="19.2181%" y="335.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2,693 samples, 4.57%)</title><rect x="41.1937%" y="309" width="4.5690%" height="15" fill="rgb(247,70,30)" fg:x="24280" fg:w="2693"/><text x="41.4437%" y="319.50">hashb..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (1,301 samples, 2.21%)</title><rect x="52.3642%" y="309" width="2.2073%" height="15" fill="rgb(212,68,19)" fg:x="30864" fg:w="1301"/><text x="52.6142%" y="319.50">c..</text></g><g><title>bfplan::annealing::energy::BufferStatistics::emplace_of_buffer (28,732 samples, 48.75%)</title><rect x="10.5936%" y="341" width="48.7471%" height="15" fill="rgb(240,187,13)" fg:x="6244" fg:w="28732"/><text x="10.8436%" y="351.50">bfplan::annealing::energy::BufferStatistics::emplace_of_buffer</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (8,003 samples, 13.58%)</title><rect x="45.7627%" y="325" width="13.5780%" height="15" fill="rgb(223,113,26)" fg:x="26973" fg:w="8003"/><text x="46.0127%" y="335.50">hashbrown::map::HashM..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2,811 samples, 4.77%)</title><rect x="54.5715%" y="309" width="4.7692%" height="15" fill="rgb(206,192,2)" fg:x="32165" fg:w="2811"/><text x="54.8215%" y="319.50">hashbr..</text></g><g><title>bfplan::annealing::energy::BufferStatistics::energy (10,767 samples, 18.27%)</title><rect x="59.3407%" y="341" width="18.2674%" height="15" fill="rgb(241,108,4)" fg:x="34976" fg:w="10767"/><text x="59.5907%" y="351.50">bfplan::annealing::energy::B..</text></g><g><title>bfplan::annealing::inner_state::InnerState::collision_checks (619 samples, 1.05%)</title><rect x="77.7897%" y="325" width="1.0502%" height="15" fill="rgb(247,173,49)" fg:x="45850" fg:w="619"/><text x="78.0397%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (119 samples, 0.20%)</title><rect x="79.7221%" y="293" width="0.2019%" height="15" fill="rgb(224,114,35)" fg:x="46989" fg:w="119"/><text x="79.9721%" y="303.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::put_lesson (865 samples, 1.47%)</title><rect x="78.8399%" y="325" width="1.4676%" height="15" fill="rgb(245,159,27)" fg:x="46469" fg:w="865"/><text x="79.0899%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (800 samples, 1.36%)</title><rect x="78.9501%" y="309" width="1.3573%" height="15" fill="rgb(245,172,44)" fg:x="46534" fg:w="800"/><text x="79.2001%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (226 samples, 0.38%)</title><rect x="79.9240%" y="293" width="0.3834%" height="15" fill="rgb(236,23,11)" fg:x="47108" fg:w="226"/><text x="80.1740%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash (126 samples, 0.21%)</title><rect x="81.1337%" y="293" width="0.2138%" height="15" fill="rgb(205,117,38)" fg:x="47821" fg:w="126"/><text x="81.3837%" y="303.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::apply_mutation (2,546 samples, 4.32%)</title><rect x="77.6081%" y="341" width="4.3196%" height="15" fill="rgb(237,72,25)" fg:x="45743" fg:w="2546"/><text x="77.8581%" y="351.50">bfpla..</text></g><g><title>bfplan::annealing::inner_state::InnerState::remove_lesson (955 samples, 1.62%)</title><rect x="80.3074%" y="325" width="1.6203%" height="15" fill="rgb(244,70,9)" fg:x="47334" fg:w="955"/><text x="80.5574%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (852 samples, 1.45%)</title><rect x="80.4822%" y="309" width="1.4455%" height="15" fill="rgb(217,125,39)" fg:x="47437" fg:w="852"/><text x="80.7322%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (342 samples, 0.58%)</title><rect x="81.3474%" y="293" width="0.5802%" height="15" fill="rgb(235,36,10)" fg:x="47947" fg:w="342"/><text x="81.5974%" y="303.50"></text></g><g><title>bfplan::annealing::inner_state::InnerState::assert_maps_synchronized (4,926 samples, 8.36%)</title><rect x="81.9277%" y="341" width="8.3575%" height="15" fill="rgb(251,123,47)" fg:x="48289" fg:w="4926"/><text x="82.1777%" y="351.50">bfplan::anne..</text></g><g><title>bfplan::annealing::inner_state::InnerState::collision_checks (4,439 samples, 7.53%)</title><rect x="82.7539%" y="325" width="7.5313%" height="15" fill="rgb(221,13,13)" fg:x="48776" fg:w="4439"/><text x="83.0039%" y="335.50">bfplan::an..</text></g><g><title>rand::rngs::thread::thread_rng (14 samples, 0.02%)</title><rect x="90.4939%" y="309" width="0.0238%" height="15" fill="rgb(238,131,9)" fg:x="53338" fg:w="14"/><text x="90.7439%" y="319.50"></text></g><g><title>rand::random (49 samples, 0.08%)</title><rect x="90.4515%" y="325" width="0.0831%" height="15" fill="rgb(211,50,8)" fg:x="53313" fg:w="49"/><text x="90.7015%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide (10 samples, 0.02%)</title><rect x="90.5176%" y="309" width="0.0170%" height="15" fill="rgb(245,182,24)" fg:x="53352" fg:w="10"/><text x="90.7676%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (10 samples, 0.02%)</title><rect x="90.5176%" y="293" width="0.0170%" height="15" fill="rgb(242,14,37)" fg:x="53352" fg:w="10"/><text x="90.7676%" y="303.50"></text></g><g><title>rand::rngs::thread::thread_rng (20 samples, 0.03%)</title><rect x="90.5414%" y="325" width="0.0339%" height="15" fill="rgb(246,228,12)" fg:x="53366" fg:w="20"/><text x="90.7914%" y="335.50"></text></g><g><title>bfplan::annealing::mutation::Mutation::legal_of_buffer (214 samples, 0.36%)</title><rect x="90.2852%" y="341" width="0.3631%" height="15" fill="rgb(213,55,15)" fg:x="53215" fg:w="214"/><text x="90.5352%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide (43 samples, 0.07%)</title><rect x="90.5753%" y="325" width="0.0730%" height="15" fill="rgb(209,9,3)" fg:x="53386" fg:w="43"/><text x="90.8253%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (41 samples, 0.07%)</title><rect x="90.5787%" y="309" width="0.0696%" height="15" fill="rgb(230,59,30)" fg:x="53388" fg:w="41"/><text x="90.8287%" y="319.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (23 samples, 0.04%)</title><rect x="90.7043%" y="213" width="0.0390%" height="15" fill="rgb(209,121,21)" fg:x="53462" fg:w="23"/><text x="90.9543%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (30 samples, 0.05%)</title><rect x="90.7026%" y="277" width="0.0509%" height="15" fill="rgb(220,109,13)" fg:x="53461" fg:w="30"/><text x="90.9526%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (30 samples, 0.05%)</title><rect x="90.7026%" y="261" width="0.0509%" height="15" fill="rgb(232,18,1)" fg:x="53461" fg:w="30"/><text x="90.9526%" y="271.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.05%)</title><rect x="90.7026%" y="245" width="0.0509%" height="15" fill="rgb(215,41,42)" fg:x="53461" fg:w="30"/><text x="90.9526%" y="255.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (30 samples, 0.05%)</title><rect x="90.7026%" y="229" width="0.0509%" height="15" fill="rgb(224,123,36)" fg:x="53461" fg:w="30"/><text x="90.9526%" y="239.50"></text></g><g><title>pthread_mutex_unlock (6 samples, 0.01%)</title><rect x="90.7433%" y="213" width="0.0102%" height="15" fill="rgb(240,125,3)" fg:x="53485" fg:w="6"/><text x="90.9933%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="90.9146%" y="245" width="0.0136%" height="15" fill="rgb(205,98,50)" fg:x="53586" fg:w="8"/><text x="91.1646%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (8 samples, 0.01%)</title><rect x="90.9146%" y="229" width="0.0136%" height="15" fill="rgb(205,185,37)" fg:x="53586" fg:w="8"/><text x="91.1646%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12 samples, 0.02%)</title><rect x="91.1352%" y="117" width="0.0204%" height="15" fill="rgb(238,207,15)" fg:x="53716" fg:w="12"/><text x="91.3852%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.02%)</title><rect x="91.1386%" y="101" width="0.0170%" height="15" fill="rgb(213,199,42)" fg:x="53718" fg:w="10"/><text x="91.3886%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (10 samples, 0.02%)</title><rect x="91.1386%" y="85" width="0.0170%" height="15" fill="rgb(235,201,11)" fg:x="53718" fg:w="10"/><text x="91.3886%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (8 samples, 0.01%)</title><rect x="91.1420%" y="69" width="0.0136%" height="15" fill="rgb(207,46,11)" fg:x="53720" fg:w="8"/><text x="91.3920%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.09%)</title><rect x="91.1556%" y="117" width="0.0865%" height="15" fill="rgb(241,35,35)" fg:x="53728" fg:w="51"/><text x="91.4056%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (37 samples, 0.06%)</title><rect x="91.1793%" y="101" width="0.0628%" height="15" fill="rgb(243,32,47)" fg:x="53742" fg:w="37"/><text x="91.4293%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (79 samples, 0.13%)</title><rect x="91.1131%" y="165" width="0.1340%" height="15" fill="rgb(247,202,23)" fg:x="53703" fg:w="79"/><text x="91.3631%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (79 samples, 0.13%)</title><rect x="91.1131%" y="149" width="0.1340%" height="15" fill="rgb(219,102,11)" fg:x="53703" fg:w="79"/><text x="91.3631%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (79 samples, 0.13%)</title><rect x="91.1131%" y="133" width="0.1340%" height="15" fill="rgb(243,110,44)" fg:x="53703" fg:w="79"/><text x="91.3631%" y="143.50"></text></g><g><title>__GI___libc_write (1,816 samples, 3.08%)</title><rect x="91.2540%" y="101" width="3.0810%" height="15" fill="rgb(222,74,54)" fg:x="53786" fg:w="1816"/><text x="91.5040%" y="111.50">__G..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1,821 samples, 3.09%)</title><rect x="91.2489%" y="133" width="3.0895%" height="15" fill="rgb(216,99,12)" fg:x="53783" fg:w="1821"/><text x="91.4989%" y="143.50">&lt;st..</text></g><g><title>std::sys::unix::fd::FileDesc::write (1,821 samples, 3.09%)</title><rect x="91.2489%" y="117" width="3.0895%" height="15" fill="rgb(226,22,26)" fg:x="53783" fg:w="1821"/><text x="91.4989%" y="127.50">std..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1,822 samples, 3.09%)</title><rect x="91.2489%" y="149" width="3.0912%" height="15" fill="rgb(217,163,10)" fg:x="53783" fg:w="1822"/><text x="91.4989%" y="159.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,941 samples, 3.29%)</title><rect x="91.0521%" y="181" width="3.2931%" height="15" fill="rgb(213,25,53)" fg:x="53667" fg:w="1941"/><text x="91.3021%" y="191.50">&lt;st..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1,826 samples, 3.10%)</title><rect x="91.2472%" y="165" width="3.0980%" height="15" fill="rgb(252,105,26)" fg:x="53782" fg:w="1826"/><text x="91.4972%" y="175.50">std..</text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (18 samples, 0.03%)</title><rect x="94.3452%" y="181" width="0.0305%" height="15" fill="rgb(220,39,43)" fg:x="55608" fg:w="18"/><text x="94.5952%" y="191.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (12 samples, 0.02%)</title><rect x="94.3554%" y="165" width="0.0204%" height="15" fill="rgb(229,68,48)" fg:x="55614" fg:w="12"/><text x="94.6054%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (12 samples, 0.02%)</title><rect x="94.3554%" y="149" width="0.0204%" height="15" fill="rgb(252,8,32)" fg:x="55614" fg:w="12"/><text x="94.6054%" y="159.50"></text></g><g><title>__memrchr_avx2 (142 samples, 0.24%)</title><rect x="94.4046%" y="133" width="0.2409%" height="15" fill="rgb(223,20,43)" fg:x="55643" fg:w="142"/><text x="94.6546%" y="143.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2,155 samples, 3.66%)</title><rect x="90.9927%" y="213" width="3.6562%" height="15" fill="rgb(229,81,49)" fg:x="53632" fg:w="2155"/><text x="91.2427%" y="223.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2,155 samples, 3.66%)</title><rect x="90.9927%" y="197" width="3.6562%" height="15" fill="rgb(236,28,36)" fg:x="53632" fg:w="2155"/><text x="91.2427%" y="207.50">&lt;std..</text></g><g><title>std::memchr::memrchr (161 samples, 0.27%)</title><rect x="94.3757%" y="181" width="0.2732%" height="15" fill="rgb(249,185,26)" fg:x="55626" fg:w="161"/><text x="94.6257%" y="191.50"></text></g><g><title>std::sys::unix::memchr::memrchr (161 samples, 0.27%)</title><rect x="94.3757%" y="165" width="0.2732%" height="15" fill="rgb(249,174,33)" fg:x="55626" fg:w="161"/><text x="94.6257%" y="175.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (161 samples, 0.27%)</title><rect x="94.3757%" y="149" width="0.2732%" height="15" fill="rgb(233,201,37)" fg:x="55626" fg:w="161"/><text x="94.6257%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (25 samples, 0.04%)</title><rect x="94.6489%" y="213" width="0.0424%" height="15" fill="rgb(221,78,26)" fg:x="55787" fg:w="25"/><text x="94.8989%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (25 samples, 0.04%)</title><rect x="94.6489%" y="197" width="0.0424%" height="15" fill="rgb(250,127,30)" fg:x="55787" fg:w="25"/><text x="94.8989%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (24 samples, 0.04%)</title><rect x="94.6506%" y="181" width="0.0407%" height="15" fill="rgb(230,49,44)" fg:x="55788" fg:w="24"/><text x="94.9006%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (16 samples, 0.03%)</title><rect x="94.6642%" y="165" width="0.0271%" height="15" fill="rgb(229,67,23)" fg:x="55796" fg:w="16"/><text x="94.9142%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (16 samples, 0.03%)</title><rect x="94.6642%" y="149" width="0.0271%" height="15" fill="rgb(249,83,47)" fg:x="55796" fg:w="16"/><text x="94.9142%" y="159.50"></text></g><g><title>core::mem::replace (16 samples, 0.03%)</title><rect x="94.6642%" y="133" width="0.0271%" height="15" fill="rgb(215,43,3)" fg:x="55796" fg:w="16"/><text x="94.9142%" y="143.50"></text></g><g><title>core::ptr::write (16 samples, 0.03%)</title><rect x="94.6642%" y="117" width="0.0271%" height="15" fill="rgb(238,154,13)" fg:x="55796" fg:w="16"/><text x="94.9142%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (2,234 samples, 3.79%)</title><rect x="90.9282%" y="245" width="3.7902%" height="15" fill="rgb(219,56,2)" fg:x="53594" fg:w="2234"/><text x="91.1782%" y="255.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2,203 samples, 3.74%)</title><rect x="90.9808%" y="229" width="3.7376%" height="15" fill="rgb(233,0,4)" fg:x="53625" fg:w="2203"/><text x="91.2308%" y="239.50">&lt;std..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (16 samples, 0.03%)</title><rect x="94.6913%" y="213" width="0.0271%" height="15" fill="rgb(235,30,7)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (16 samples, 0.03%)</title><rect x="94.6913%" y="197" width="0.0271%" height="15" fill="rgb(250,79,13)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="207.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (16 samples, 0.03%)</title><rect x="94.6913%" y="181" width="0.0271%" height="15" fill="rgb(211,146,34)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (16 samples, 0.03%)</title><rect x="94.6913%" y="165" width="0.0271%" height="15" fill="rgb(228,22,38)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (16 samples, 0.03%)</title><rect x="94.6913%" y="149" width="0.0271%" height="15" fill="rgb(235,168,5)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="159.50"></text></g><g><title>core::mem::replace (16 samples, 0.03%)</title><rect x="94.6913%" y="133" width="0.0271%" height="15" fill="rgb(221,155,16)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="143.50"></text></g><g><title>core::ptr::write (16 samples, 0.03%)</title><rect x="94.6913%" y="117" width="0.0271%" height="15" fill="rgb(215,215,53)" fg:x="55812" fg:w="16"/><text x="94.9413%" y="127.50"></text></g><g><title>core::fmt::float::&lt;impl core::fmt::Display for f32&gt;::fmt (6 samples, 0.01%)</title><rect x="94.7184%" y="245" width="0.0102%" height="15" fill="rgb(223,4,10)" fg:x="55828" fg:w="6"/><text x="94.9684%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (22 samples, 0.04%)</title><rect x="94.7744%" y="229" width="0.0373%" height="15" fill="rgb(234,103,6)" fg:x="55861" fg:w="22"/><text x="95.0244%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="94.9424%" y="213" width="0.0238%" height="15" fill="rgb(227,97,0)" fg:x="55960" fg:w="14"/><text x="95.1924%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (11 samples, 0.02%)</title><rect x="95.1205%" y="133" width="0.0187%" height="15" fill="rgb(234,150,53)" fg:x="56065" fg:w="11"/><text x="95.3705%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12 samples, 0.02%)</title><rect x="95.1562%" y="85" width="0.0204%" height="15" fill="rgb(228,201,54)" fg:x="56086" fg:w="12"/><text x="95.4062%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.02%)</title><rect x="95.1579%" y="69" width="0.0187%" height="15" fill="rgb(222,22,37)" fg:x="56087" fg:w="11"/><text x="95.4079%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (11 samples, 0.02%)</title><rect x="95.1579%" y="53" width="0.0187%" height="15" fill="rgb(237,53,32)" fg:x="56087" fg:w="11"/><text x="95.4079%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (7 samples, 0.01%)</title><rect x="95.1647%" y="37" width="0.0119%" height="15" fill="rgb(233,25,53)" fg:x="56091" fg:w="7"/><text x="95.4147%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.08%)</title><rect x="95.1765%" y="85" width="0.0814%" height="15" fill="rgb(210,40,34)" fg:x="56098" fg:w="48"/><text x="95.4265%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.06%)</title><rect x="95.2020%" y="69" width="0.0560%" height="15" fill="rgb(241,220,44)" fg:x="56113" fg:w="33"/><text x="95.4520%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (75 samples, 0.13%)</title><rect x="95.1392%" y="133" width="0.1272%" height="15" fill="rgb(235,28,35)" fg:x="56076" fg:w="75"/><text x="95.3892%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (75 samples, 0.13%)</title><rect x="95.1392%" y="117" width="0.1272%" height="15" fill="rgb(210,56,17)" fg:x="56076" fg:w="75"/><text x="95.3892%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (75 samples, 0.13%)</title><rect x="95.1392%" y="101" width="0.1272%" height="15" fill="rgb(224,130,29)" fg:x="56076" fg:w="75"/><text x="95.3892%" y="111.50"></text></g><g><title>__GI___libc_write (513 samples, 0.87%)</title><rect x="95.2665%" y="69" width="0.8704%" height="15" fill="rgb(235,212,8)" fg:x="56151" fg:w="513"/><text x="95.5165%" y="79.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (627 samples, 1.06%)</title><rect x="95.0747%" y="149" width="1.0638%" height="15" fill="rgb(223,33,50)" fg:x="56038" fg:w="627"/><text x="95.3247%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (514 samples, 0.87%)</title><rect x="95.2665%" y="133" width="0.8721%" height="15" fill="rgb(219,149,13)" fg:x="56151" fg:w="514"/><text x="95.5165%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (514 samples, 0.87%)</title><rect x="95.2665%" y="117" width="0.8721%" height="15" fill="rgb(250,156,29)" fg:x="56151" fg:w="514"/><text x="95.5165%" y="127.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (514 samples, 0.87%)</title><rect x="95.2665%" y="101" width="0.8721%" height="15" fill="rgb(216,193,19)" fg:x="56151" fg:w="514"/><text x="95.5165%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (514 samples, 0.87%)</title><rect x="95.2665%" y="85" width="0.8721%" height="15" fill="rgb(216,135,14)" fg:x="56151" fg:w="514"/><text x="95.5165%" y="95.50"></text></g><g><title>std::io::buffered::linewritershim::LineWriterShim&lt;W&gt;::flush_if_completed_line (7 samples, 0.01%)</title><rect x="96.1385%" y="149" width="0.0119%" height="15" fill="rgb(241,47,5)" fg:x="56665" fg:w="7"/><text x="96.3885%" y="159.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (6 samples, 0.01%)</title><rect x="96.1402%" y="133" width="0.0102%" height="15" fill="rgb(233,42,35)" fg:x="56666" fg:w="6"/><text x="96.3902%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 0.01%)</title><rect x="96.1402%" y="117" width="0.0102%" height="15" fill="rgb(231,13,6)" fg:x="56666" fg:w="6"/><text x="96.3902%" y="127.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (808 samples, 1.37%)</title><rect x="95.0187%" y="181" width="1.3709%" height="15" fill="rgb(207,181,40)" fg:x="56005" fg:w="808"/><text x="95.2687%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (808 samples, 1.37%)</title><rect x="95.0187%" y="165" width="1.3709%" height="15" fill="rgb(254,173,49)" fg:x="56005" fg:w="808"/><text x="95.2687%" y="175.50"></text></g><g><title>std::memchr::memrchr (141 samples, 0.24%)</title><rect x="96.1504%" y="149" width="0.2392%" height="15" fill="rgb(221,1,38)" fg:x="56672" fg:w="141"/><text x="96.4004%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (141 samples, 0.24%)</title><rect x="96.1504%" y="133" width="0.2392%" height="15" fill="rgb(206,124,46)" fg:x="56672" fg:w="141"/><text x="96.4004%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (141 samples, 0.24%)</title><rect x="96.1504%" y="117" width="0.2392%" height="15" fill="rgb(249,21,11)" fg:x="56672" fg:w="141"/><text x="96.4004%" y="127.50"></text></g><g><title>__memrchr_avx2 (122 samples, 0.21%)</title><rect x="96.1826%" y="101" width="0.2070%" height="15" fill="rgb(222,201,40)" fg:x="56691" fg:w="122"/><text x="96.4326%" y="111.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (22 samples, 0.04%)</title><rect x="96.3896%" y="181" width="0.0373%" height="15" fill="rgb(235,61,29)" fg:x="56813" fg:w="22"/><text x="96.6396%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (22 samples, 0.04%)</title><rect x="96.3896%" y="165" width="0.0373%" height="15" fill="rgb(219,207,3)" fg:x="56813" fg:w="22"/><text x="96.6396%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (17 samples, 0.03%)</title><rect x="96.3981%" y="149" width="0.0288%" height="15" fill="rgb(222,56,46)" fg:x="56818" fg:w="17"/><text x="96.6481%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (873 samples, 1.48%)</title><rect x="94.9662%" y="213" width="1.4811%" height="15" fill="rgb(239,76,54)" fg:x="55974" fg:w="873"/><text x="95.2162%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (848 samples, 1.44%)</title><rect x="95.0086%" y="197" width="1.4387%" height="15" fill="rgb(231,124,27)" fg:x="55999" fg:w="848"/><text x="95.2586%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="96.4269%" y="181" width="0.0204%" height="15" fill="rgb(249,195,6)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (12 samples, 0.02%)</title><rect x="96.4269%" y="165" width="0.0204%" height="15" fill="rgb(237,174,47)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="175.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="96.4269%" y="149" width="0.0204%" height="15" fill="rgb(206,201,31)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (12 samples, 0.02%)</title><rect x="96.4269%" y="133" width="0.0204%" height="15" fill="rgb(231,57,52)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (12 samples, 0.02%)</title><rect x="96.4269%" y="117" width="0.0204%" height="15" fill="rgb(248,177,22)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="127.50"></text></g><g><title>core::mem::replace (12 samples, 0.02%)</title><rect x="96.4269%" y="101" width="0.0204%" height="15" fill="rgb(215,211,37)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="111.50"></text></g><g><title>core::ptr::write (12 samples, 0.02%)</title><rect x="96.4269%" y="85" width="0.0204%" height="15" fill="rgb(241,128,51)" fg:x="56835" fg:w="12"/><text x="96.6769%" y="95.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (983 samples, 1.67%)</title><rect x="94.8118%" y="229" width="1.6678%" height="15" fill="rgb(227,165,31)" fg:x="55883" fg:w="983"/><text x="95.0618%" y="239.50"></text></g><g><title>core::slice::iter::&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (19 samples, 0.03%)</title><rect x="96.4473%" y="213" width="0.0322%" height="15" fill="rgb(228,167,24)" fg:x="56847" fg:w="19"/><text x="96.6973%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (19 samples, 0.03%)</title><rect x="96.4473%" y="197" width="0.0322%" height="15" fill="rgb(228,143,12)" fg:x="56847" fg:w="19"/><text x="96.6973%" y="207.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (19 samples, 0.03%)</title><rect x="96.4473%" y="181" width="0.0322%" height="15" fill="rgb(249,149,8)" fg:x="56847" fg:w="19"/><text x="96.6973%" y="191.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (27 samples, 0.05%)</title><rect x="96.4795%" y="229" width="0.0458%" height="15" fill="rgb(243,35,44)" fg:x="56866" fg:w="27"/><text x="96.7295%" y="239.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::rawfp::RawFloat&gt;::integer_decode (25 samples, 0.04%)</title><rect x="96.6322%" y="197" width="0.0424%" height="15" fill="rgb(246,89,9)" fg:x="56956" fg:w="25"/><text x="96.8822%" y="207.50"></text></g><g><title>core::num::flt2dec::decoder::decode (65 samples, 0.11%)</title><rect x="96.5847%" y="213" width="0.1103%" height="15" fill="rgb(233,213,13)" fg:x="56928" fg:w="65"/><text x="96.8347%" y="223.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::integer_decode (8 samples, 0.01%)</title><rect x="96.6814%" y="197" width="0.0136%" height="15" fill="rgb(233,141,41)" fg:x="56985" fg:w="8"/><text x="96.9314%" y="207.50"></text></g><g><title>core::num::flt2dec::determine_sign (10 samples, 0.02%)</title><rect x="96.6950%" y="213" width="0.0170%" height="15" fill="rgb(239,167,4)" fg:x="56993" fg:w="10"/><text x="96.9450%" y="223.50"></text></g><g><title>core::num::flt2dec::digits_to_dec_str (53 samples, 0.09%)</title><rect x="96.7120%" y="213" width="0.0899%" height="15" fill="rgb(209,217,16)" fg:x="57003" fg:w="53"/><text x="96.9620%" y="223.50"></text></g><g><title>core::cmp::PartialOrd::ge (6 samples, 0.01%)</title><rect x="96.8681%" y="149" width="0.0102%" height="15" fill="rgb(219,88,35)" fg:x="57095" fg:w="6"/><text x="97.1181%" y="159.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::PartialOrd&gt;::partial_cmp (6 samples, 0.01%)</title><rect x="96.8681%" y="133" width="0.0102%" height="15" fill="rgb(220,193,23)" fg:x="57095" fg:w="6"/><text x="97.1181%" y="143.50"></text></g><g><title>&lt;core::num::bignum::Big32x40 as core::cmp::Ord&gt;::cmp (6 samples, 0.01%)</title><rect x="96.8681%" y="117" width="0.0102%" height="15" fill="rgb(230,90,52)" fg:x="57095" fg:w="6"/><text x="97.1181%" y="127.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::div_rem_upto_16 (10 samples, 0.02%)</title><rect x="96.8664%" y="165" width="0.0170%" height="15" fill="rgb(252,106,19)" fg:x="57094" fg:w="10"/><text x="97.1164%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_shortest (28 samples, 0.05%)</title><rect x="96.8392%" y="181" width="0.0475%" height="15" fill="rgb(206,74,20)" fg:x="57078" fg:w="28"/><text x="97.0892%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_sub (9 samples, 0.02%)</title><rect x="97.8691%" y="165" width="0.0153%" height="15" fill="rgb(230,138,44)" fg:x="57685" fg:w="9"/><text x="98.1191%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_sub (9 samples, 0.02%)</title><rect x="97.8691%" y="149" width="0.0153%" height="15" fill="rgb(235,182,43)" fg:x="57685" fg:w="9"/><text x="98.1191%" y="159.50"></text></g><g><title>core::num::diy_float::Fp::mul (155 samples, 0.26%)</title><rect x="97.8843%" y="165" width="0.2630%" height="15" fill="rgb(242,16,51)" fg:x="57694" fg:w="155"/><text x="98.1343%" y="175.50"></text></g><g><title>core::num::diy_float::Fp::normalize (91 samples, 0.15%)</title><rect x="98.1473%" y="165" width="0.1544%" height="15" fill="rgb(248,9,4)" fg:x="57849" fg:w="91"/><text x="98.3973%" y="175.50"></text></g><g><title>core::num::diy_float::Fp::normalize_to (44 samples, 0.07%)</title><rect x="98.3017%" y="165" width="0.0747%" height="15" fill="rgb(210,31,22)" fg:x="57940" fg:w="44"/><text x="98.5517%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::cached_power (56 samples, 0.10%)</title><rect x="98.3763%" y="165" width="0.0950%" height="15" fill="rgb(239,54,39)" fg:x="57984" fg:w="56"/><text x="98.6263%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (23 samples, 0.04%)</title><rect x="98.4714%" y="165" width="0.0390%" height="15" fill="rgb(230,99,41)" fg:x="58040" fg:w="23"/><text x="98.7214%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt::round_and_weed (58 samples, 0.10%)</title><rect x="98.5104%" y="165" width="0.0984%" height="15" fill="rgb(253,106,12)" fg:x="58063" fg:w="58"/><text x="98.7604%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::max_pow10_no_more_than (31 samples, 0.05%)</title><rect x="98.6088%" y="165" width="0.0526%" height="15" fill="rgb(213,46,41)" fg:x="58121" fg:w="31"/><text x="98.8588%" y="175.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (2,315 samples, 3.93%)</title><rect x="94.7354%" y="245" width="3.9277%" height="15" fill="rgb(215,133,35)" fg:x="55838" fg:w="2315"/><text x="94.9854%" y="255.50">core..</text></g><g><title>core::num::flt2dec::to_shortest_str (1,260 samples, 2.14%)</title><rect x="96.5253%" y="229" width="2.1377%" height="15" fill="rgb(213,28,5)" fg:x="56893" fg:w="1260"/><text x="96.7753%" y="239.50">c..</text></g><g><title>core::ops::function::FnMut::call_mut (1,097 samples, 1.86%)</title><rect x="96.8019%" y="213" width="1.8612%" height="15" fill="rgb(215,77,49)" fg:x="57056" fg:w="1097"/><text x="97.0519%" y="223.50">c..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest (1,097 samples, 1.86%)</title><rect x="96.8019%" y="197" width="1.8612%" height="15" fill="rgb(248,100,22)" fg:x="57056" fg:w="1097"/><text x="97.0519%" y="207.50">c..</text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (1,047 samples, 1.78%)</title><rect x="96.8867%" y="181" width="1.7764%" height="15" fill="rgb(208,67,9)" fg:x="57106" fg:w="1047"/><text x="97.1367%" y="191.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (39 samples, 0.07%)</title><rect x="98.8446%" y="133" width="0.0662%" height="15" fill="rgb(219,133,21)" fg:x="58260" fg:w="39"/><text x="99.0946%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (39 samples, 0.07%)</title><rect x="98.8446%" y="117" width="0.0662%" height="15" fill="rgb(246,46,29)" fg:x="58260" fg:w="39"/><text x="99.0946%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (39 samples, 0.07%)</title><rect x="98.8446%" y="101" width="0.0662%" height="15" fill="rgb(246,185,52)" fg:x="58260" fg:w="39"/><text x="99.0946%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.04%)</title><rect x="98.8684%" y="85" width="0.0424%" height="15" fill="rgb(252,136,11)" fg:x="58274" fg:w="25"/><text x="99.1184%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (20 samples, 0.03%)</title><rect x="98.8768%" y="69" width="0.0339%" height="15" fill="rgb(219,138,53)" fg:x="58279" fg:w="20"/><text x="99.1268%" y="79.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (281 samples, 0.48%)</title><rect x="98.8158%" y="149" width="0.4767%" height="15" fill="rgb(211,51,23)" fg:x="58243" fg:w="281"/><text x="99.0658%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (225 samples, 0.38%)</title><rect x="98.9108%" y="133" width="0.3817%" height="15" fill="rgb(247,221,28)" fg:x="58299" fg:w="225"/><text x="99.1608%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (224 samples, 0.38%)</title><rect x="98.9125%" y="117" width="0.3800%" height="15" fill="rgb(251,222,45)" fg:x="58300" fg:w="224"/><text x="99.1625%" y="127.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (224 samples, 0.38%)</title><rect x="98.9125%" y="101" width="0.3800%" height="15" fill="rgb(217,162,53)" fg:x="58300" fg:w="224"/><text x="99.1625%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (224 samples, 0.38%)</title><rect x="98.9125%" y="85" width="0.3800%" height="15" fill="rgb(229,93,14)" fg:x="58300" fg:w="224"/><text x="99.1625%" y="95.50"></text></g><g><title>__GI___libc_write (224 samples, 0.38%)</title><rect x="98.9125%" y="69" width="0.3800%" height="15" fill="rgb(209,67,49)" fg:x="58300" fg:w="224"/><text x="99.1625%" y="79.50"></text></g><g><title>__memrchr_avx2 (52 samples, 0.09%)</title><rect x="99.3163%" y="101" width="0.0882%" height="15" fill="rgb(213,87,29)" fg:x="58538" fg:w="52"/><text x="99.5663%" y="111.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (363 samples, 0.62%)</title><rect x="98.7920%" y="181" width="0.6159%" height="15" fill="rgb(205,151,52)" fg:x="58229" fg:w="363"/><text x="99.0420%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (363 samples, 0.62%)</title><rect x="98.7920%" y="165" width="0.6159%" height="15" fill="rgb(253,215,39)" fg:x="58229" fg:w="363"/><text x="99.0420%" y="175.50"></text></g><g><title>std::memchr::memrchr (64 samples, 0.11%)</title><rect x="99.2993%" y="149" width="0.1086%" height="15" fill="rgb(221,220,41)" fg:x="58528" fg:w="64"/><text x="99.5493%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (64 samples, 0.11%)</title><rect x="99.2993%" y="133" width="0.1086%" height="15" fill="rgb(218,133,21)" fg:x="58528" fg:w="64"/><text x="99.5493%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (64 samples, 0.11%)</title><rect x="99.2993%" y="117" width="0.1086%" height="15" fill="rgb(221,193,43)" fg:x="58528" fg:w="64"/><text x="99.5493%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (8 samples, 0.01%)</title><rect x="99.4079%" y="181" width="0.0136%" height="15" fill="rgb(240,128,52)" fg:x="58592" fg:w="8"/><text x="99.6579%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (8 samples, 0.01%)</title><rect x="99.4079%" y="165" width="0.0136%" height="15" fill="rgb(253,114,12)" fg:x="58592" fg:w="8"/><text x="99.6579%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (8 samples, 0.01%)</title><rect x="99.4079%" y="149" width="0.0136%" height="15" fill="rgb(215,223,47)" fg:x="58592" fg:w="8"/><text x="99.6579%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.01%)</title><rect x="99.4113%" y="133" width="0.0102%" height="15" fill="rgb(248,225,23)" fg:x="58594" fg:w="6"/><text x="99.6613%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.01%)</title><rect x="99.4113%" y="117" width="0.0102%" height="15" fill="rgb(250,108,0)" fg:x="58594" fg:w="6"/><text x="99.6613%" y="127.50"></text></g><g><title>core::mem::replace (6 samples, 0.01%)</title><rect x="99.4113%" y="101" width="0.0102%" height="15" fill="rgb(228,208,7)" fg:x="58594" fg:w="6"/><text x="99.6613%" y="111.50"></text></g><g><title>core::ptr::write (6 samples, 0.01%)</title><rect x="99.4113%" y="85" width="0.0102%" height="15" fill="rgb(244,45,10)" fg:x="58594" fg:w="6"/><text x="99.6613%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (383 samples, 0.65%)</title><rect x="98.7784%" y="213" width="0.6498%" height="15" fill="rgb(207,125,25)" fg:x="58221" fg:w="383"/><text x="99.0284%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (377 samples, 0.64%)</title><rect x="98.7886%" y="197" width="0.6396%" height="15" fill="rgb(210,195,18)" fg:x="58227" fg:w="377"/><text x="99.0386%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (13 samples, 0.02%)</title><rect x="99.5148%" y="197" width="0.0221%" height="15" fill="rgb(249,80,12)" fg:x="58655" fg:w="13"/><text x="99.7648%" y="207.50"></text></g><g><title>core::fmt::Formatter::pad_integral (77 samples, 0.13%)</title><rect x="99.4282%" y="213" width="0.1306%" height="15" fill="rgb(221,65,9)" fg:x="58604" fg:w="77"/><text x="99.6782%" y="223.50"></text></g><g><title>core::fmt::Formatter::sign_plus (13 samples, 0.02%)</title><rect x="99.5368%" y="197" width="0.0221%" height="15" fill="rgb(235,49,36)" fg:x="58668" fg:w="13"/><text x="99.7868%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="99.5589%" y="213" width="0.0238%" height="15" fill="rgb(225,32,20)" fg:x="58681" fg:w="14"/><text x="99.8089%" y="223.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (544 samples, 0.92%)</title><rect x="98.6631%" y="245" width="0.9230%" height="15" fill="rgb(215,141,46)" fg:x="58153" fg:w="544"/><text x="98.9131%" y="255.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (539 samples, 0.91%)</title><rect x="98.6716%" y="229" width="0.9145%" height="15" fill="rgb(250,160,47)" fg:x="58158" fg:w="539"/><text x="98.9216%" y="239.50"></text></g><g><title>core::fmt::write (5,194 samples, 8.81%)</title><rect x="90.7840%" y="261" width="8.8122%" height="15" fill="rgb(216,222,40)" fg:x="53509" fg:w="5194"/><text x="91.0340%" y="271.50">core::fmt::w..</text></g><g><title>std::io::Write::write_fmt (5,215 samples, 8.85%)</title><rect x="90.7535%" y="277" width="8.8478%" height="15" fill="rgb(234,217,39)" fg:x="53491" fg:w="5215"/><text x="91.0035%" y="287.50">std::io::Wri..</text></g><g><title>__GI___pthread_mutex_lock (31 samples, 0.05%)</title><rect x="99.6013%" y="229" width="0.0526%" height="15" fill="rgb(207,178,40)" fg:x="58706" fg:w="31"/><text x="99.8513%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5,303 samples, 9.00%)</title><rect x="90.6754%" y="309" width="8.9971%" height="15" fill="rgb(221,136,13)" fg:x="53445" fg:w="5303"/><text x="90.9254%" y="319.50">&lt;std::io::std..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5,295 samples, 8.98%)</title><rect x="90.6890%" y="293" width="8.9836%" height="15" fill="rgb(249,199,10)" fg:x="53453" fg:w="5295"/><text x="90.9390%" y="303.50">&lt;&amp;std::io::st..</text></g><g><title>std::io::stdio::Stdout::lock (42 samples, 0.07%)</title><rect x="99.6013%" y="277" width="0.0713%" height="15" fill="rgb(249,222,13)" fg:x="58706" fg:w="42"/><text x="99.8513%" y="287.50"></text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (42 samples, 0.07%)</title><rect x="99.6013%" y="261" width="0.0713%" height="15" fill="rgb(244,185,38)" fg:x="58706" fg:w="42"/><text x="99.8513%" y="271.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (42 samples, 0.07%)</title><rect x="99.6013%" y="245" width="0.0713%" height="15" fill="rgb(236,202,9)" fg:x="58706" fg:w="42"/><text x="99.8513%" y="255.50"></text></g><g><title>pthread_mutex_lock (11 samples, 0.02%)</title><rect x="99.6539%" y="229" width="0.0187%" height="15" fill="rgb(250,229,37)" fg:x="58737" fg:w="11"/><text x="99.9039%" y="239.50"></text></g><g><title>__libc_start_main (52,722 samples, 89.45%)</title><rect x="10.2340%" y="501" width="89.4488%" height="15" fill="rgb(206,174,23)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="511.50">__libc_start_main</text></g><g><title>main (52,722 samples, 89.45%)</title><rect x="10.2340%" y="485" width="89.4488%" height="15" fill="rgb(211,33,43)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (52,722 samples, 89.45%)</title><rect x="10.2340%" y="469" width="89.4488%" height="15" fill="rgb(245,58,50)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (52,722 samples, 89.45%)</title><rect x="10.2340%" y="453" width="89.4488%" height="15" fill="rgb(244,68,36)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (52,722 samples, 89.45%)</title><rect x="10.2340%" y="437" width="89.4488%" height="15" fill="rgb(232,229,15)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (52,722 samples, 89.45%)</title><rect x="10.2340%" y="421" width="89.4488%" height="15" fill="rgb(254,30,23)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (52,722 samples, 89.45%)</title><rect x="10.2340%" y="405" width="89.4488%" height="15" fill="rgb(235,160,14)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (52,722 samples, 89.45%)</title><rect x="10.2340%" y="389" width="89.4488%" height="15" fill="rgb(212,155,44)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (52,722 samples, 89.45%)</title><rect x="10.2340%" y="373" width="89.4488%" height="15" fill="rgb(226,2,50)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>bfplan::main (52,722 samples, 89.45%)</title><rect x="10.2340%" y="357" width="89.4488%" height="15" fill="rgb(234,177,6)" fg:x="6032" fg:w="52722"/><text x="10.4840%" y="367.50">bfplan::main</text></g><g><title>std::io::stdio::_print (5,324 samples, 9.03%)</title><rect x="90.6500%" y="341" width="9.0328%" height="15" fill="rgb(217,24,9)" fg:x="53430" fg:w="5324"/><text x="90.9000%" y="351.50">std::io::stdi..</text></g><g><title>std::io::stdio::print_to (5,311 samples, 9.01%)</title><rect x="90.6720%" y="325" width="9.0107%" height="15" fill="rgb(220,13,46)" fg:x="53443" fg:w="5311"/><text x="90.9220%" y="335.50">std::io::stdi..</text></g><g><title>std::io::stdio::stdout (6 samples, 0.01%)</title><rect x="99.6726%" y="309" width="0.0102%" height="15" fill="rgb(239,221,27)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="319.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init_pin (6 samples, 0.01%)</title><rect x="99.6726%" y="293" width="0.0102%" height="15" fill="rgb(222,198,25)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="303.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get (6 samples, 0.01%)</title><rect x="99.6726%" y="277" width="0.0102%" height="15" fill="rgb(211,99,13)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="287.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::is_initialized (6 samples, 0.01%)</title><rect x="99.6726%" y="261" width="0.0102%" height="15" fill="rgb(232,111,31)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="271.50"></text></g><g><title>std::sync::once::Once::is_completed (6 samples, 0.01%)</title><rect x="99.6726%" y="245" width="0.0102%" height="15" fill="rgb(245,82,37)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.01%)</title><rect x="99.6726%" y="229" width="0.0102%" height="15" fill="rgb(227,149,46)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.01%)</title><rect x="99.6726%" y="213" width="0.0102%" height="15" fill="rgb(218,36,50)" fg:x="58748" fg:w="6"/><text x="99.9226%" y="223.50"></text></g><g><title>_start (52,729 samples, 89.46%)</title><rect x="10.2255%" y="517" width="89.4606%" height="15" fill="rgb(226,80,48)" fg:x="6027" fg:w="52729"/><text x="10.4755%" y="527.50">_start</text></g><g><title>bfplan::annealing::inner_state::InnerState::collision_checks (7 samples, 0.01%)</title><rect x="99.7031%" y="517" width="0.0119%" height="15" fill="rgb(238,224,15)" fg:x="58766" fg:w="7"/><text x="99.9531%" y="527.50"></text></g><g><title>bfplan::annealing::mutation::Mutation::legal_of_buffer (11 samples, 0.02%)</title><rect x="99.7218%" y="517" width="0.0187%" height="15" fill="rgb(241,136,10)" fg:x="58777" fg:w="11"/><text x="99.9718%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (49 samples, 0.08%)</title><rect x="99.7404%" y="517" width="0.0831%" height="15" fill="rgb(208,32,45)" fg:x="58788" fg:w="49"/><text x="99.9904%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (7 samples, 0.01%)</title><rect x="99.8236%" y="517" width="0.0119%" height="15" fill="rgb(207,135,9)" fg:x="58837" fg:w="7"/><text x="100.0736%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (86 samples, 0.15%)</title><rect x="99.8354%" y="517" width="0.1459%" height="15" fill="rgb(206,86,44)" fg:x="58844" fg:w="86"/><text x="100.0854%" y="527.50"></text></g><g><title>all (58,941 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="58941"/><text x="0.2500%" y="559.50"></text></g><g><title>bfplan (58,941 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="58941"/><text x="0.2500%" y="543.50">bfplan</text></g><g><title>std::io::stdio::STDOUT (10 samples, 0.02%)</title><rect x="99.9830%" y="517" width="0.0170%" height="15" fill="rgb(234,36,40)" fg:x="58931" fg:w="10"/><text x="100.2330%" y="527.50"></text></g></svg></svg>